name: Deploy JUDICIAL Backend (Production - Docker)

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup backend directory
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            sudo mkdir -p /var/www/python.sicsglobal.com/judicial_backend
            sudo chown -R $USER:$USER /var/www/python.sicsglobal.com/judicial_backend
            sudo chmod -R 755 /var/www/python.sicsglobal.com/judicial_backend
            sudo mkdir -p /var/www/python.sicsglobal.com/judicial_backend/uploads
            sudo chown -R $USER:$USER /var/www/python.sicsglobal.com/judicial_backend/uploads
            sudo mkdir -p /var/www/python.sicsglobal.com/judicial_backend/backups
            sudo chown -R $USER:$USER /var/www/python.sicsglobal.com/judicial_backend/backups
            sudo mkdir -p /var/www/python.sicsglobal.com/judicial_backend/mongo_backups
            sudo chown -R $USER:$USER /var/www/python.sicsglobal.com/judicial_backend/mongo_backups

      - name: Create backup on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /var/www/python.sicsglobal.com/judicial_backend
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            
            if [ -d "current" ]; then
              echo "Creating backup of current deployment..."
              tar -czf backups/backup_$TIMESTAMP.tar.gz current/ uploads/ .env
              echo "Backup created: backups/backup_$TIMESTAMP.tar.gz"
              
              if docker ps | grep judicial_mongo_prod; then
                echo "Creating MongoDB backup..."
                docker exec judicial_mongo_prod mongodump --archive --gzip --db judicial_db > mongo_backups/mongo_backup_$TIMESTAMP.gz
                echo "MongoDB backup created: mongo_backups/mongo_backup_$TIMESTAMP.gz"
              fi
            else
              echo "No existing deployment found, skipping backup"
            fi

      - name: Copy backend files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "./"
          target: "/var/www/python.sicsglobal.com/judicial_backend/current/"
          strip_components: 1
          overwrite: true

      - name: Deploy with Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /var/www/python.sicsglobal.com/judicial_backend/current
            
            # Create .env file for Docker
            cat > .env <<EOF
            MONGO_URI=mongodb://mongo:27017/judicial_db
            NODE_ENV=production
            CORS_ORIGIN=https://python.sicsglobal.com
            UPLOAD_DIR=/app/uploads/
            EOF
            
            chmod 600 .env
            
            # Stop and remove existing containers
            docker compose -f docker-compose-prod.yml down || true
            
            # Build and start containers
            if docker compose -f docker-compose-prod.yml up -d --build; then
              echo "Containers started successfully"
              
              # Wait for services to become healthy
              echo "Waiting for services to become ready (max 2 minutes)..."
              for i in {1..24}; do
                BACKEND_STATUS=$(docker inspect --format='{{.State.Health.Status}}' judicial_backend_prod 2>/dev/null || echo "starting")
                MONGO_STATUS=$(docker inspect --format='{{.State.Status}}' judicial_mongo_prod 2>/dev/null || echo "starting")
                
                if [ "$BACKEND_STATUS" = "healthy" ] && [ "$MONGO_STATUS" = "running" ]; then
                  echo "All services are ready"
                  break
                fi
                
                echo "Waiting... (Backend: $BACKEND_STATUS, MongoDB: $MONGO_STATUS)"
                sleep 5
              done
              
              # Final health check with timeout
              echo "Performing final health check..."
              if ! curl --max-time 10 --retry 3 --retry-delay 5 --retry-max-time 30 --fail http://localhost:4048/; then
                echo "::error::Health check failed after maximum retries"
                exit 1
              fi
              
              # Clean up old backups
              cd /var/www/python.sicsglobal.com/judicial_backend/backups
              ls -t | tail -n +6 | xargs rm -f --
              
              cd /var/www/python.sicsglobal.com/judicial_backend/mongo_backups
              ls -t | tail -n +6 | xargs rm -f --
            else
              echo "::error::Container startup failed, initiating rollback"
              
              # Rollback procedure
              cd /var/www/python.sicsglobal.com/judicial_backend
              docker compose -f current/docker-compose-prod.yml down || true
              
              LATEST_BACKUP=$(ls -t backups/ | head -1)
              LATEST_MONGO_BACKUP=$(ls -t mongo_backups/ | head -1)
              
              if [ -n "$LATEST_BACKUP" ]; then
                echo "Restoring from backup: $LATEST_BACKUP"
                rm -rf current/*
                tar -xzf backups/$LATEST_BACKUP -C .
                
                if [ -n "$LATEST_MONGO_BACKUP" ]; then
                  echo "Restoring MongoDB from backup: $LATEST_MONGO_BACKUP"
                  docker compose -f current/docker-compose-prod.yml up -d mongo
                  sleep 10
                  docker exec -i judicial_mongo_prod mongorestore --archive --gzip --drop < mongo_backups/$LATEST_MONGO_BACKUP
                fi
                
                cd current
                docker compose -f docker-compose-prod.yml up -d
                
                # Verify rollback
                if curl --max-time 10 --fail http://localhost:4048/; then
                  echo "Rollback completed successfully"
                  exit 1
                else
                  echo "::error::Rollback health check failed"
                  exit 1
                fi
              else
                echo "::error::No backup available for rollback"
                exit 1
              fi
            fi
            
            # Final verification
            echo "Deployment verification:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            echo "Application health:"
            curl -I http://localhost:4048/
